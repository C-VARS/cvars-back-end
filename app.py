from flask import Flask, request, jsonify, abort
from script import PostgresDatabase

app = Flask(__name__)
db = PostgresDatabase.PostgresDatabase()

"""
This file is the root of the Flask server program. Variable "app" is the WSGI
generated by Flask, and "db" is an implementation of the DatabaseInterface used
to interact with the PostgresSQL database. 
"""


# root
@app.route("/")
def index():
    """
    Testing the root directory of this server
    :return: str
    """
    return "Just testing"


@app.route("/users/login", methods=['GET'])
def login():
    """
    Login this user using the parameters given. Return the JSON response built
    from the dictionary defined by DatabaseInterface. If the parameters are not
    there, return a failure response.
    :return: JSON formatted response
    """
    username = request.args.get('username', "")
    password = request.args.get('password', "")

    if username == "" or password == "":
        return jsonify({"loginStatus": False})

    return jsonify(db.attempt_login(username, password))

@app.route("/invoices", methods=['GET'])
def get_invoices():
    """
    Return invoices constructed from the list defined in Database Interface 
    associated with the paramters given
    :return: JSON formatted response.
    """
    username = request.args.get('username', "")

    return jsonify(db.get_invoice_information(username))

@app.route("/users/register", methods=["POST"])

def register_user():
    """
    A POST response that registers a new user in the database. If the
    body is not a JSON, return a HTTP400 error. Otherwise, the database
    interface will handle the response and return a dictionary, which will be
    formatted into JSON.
    :return: JSON formatted responsesc
    """
    register_info = request.get_json()
    if not register_info:
        abort(400)
    return jsonify(db.register_user(register_info))


@app.route("/invoices/create", methods=['POST'])
def create_invoice():
    """
    A POST function that creates a new invoice in the database in accordance
    to the given JSON information. If the request is not JSON, return a
    HTTP400 error. Otherwise, the database interface will handle the response
    and return a dictionary containing the success of the creation, which
    will be returned as a JSON
    :return:
    """
    invoice_info = request.get_json()
    if not invoice_info:
        abort(400)
    return jsonify(db.create_invoice(invoice_info))


if __name__ == '__main__':
    app.run(debug=True)
