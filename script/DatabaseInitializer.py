
class DatabaseInitializer:
    """
    A class used to initialize the tables in a SQL-based database
    """

    def __init__(self, connection) -> None:
        """
        Inject a reference to the database connection
        :param connection: database connection object
        """
        self.connection = connection

    def _initialize_login_info(self) -> None:
        """
        Check if the database contains a table of login info. If not, initialize
        the table.
        """
        cursor = self.connection.cursor()

        # initialize the LoginInfo table
        try:
            cursor.execute("SELECT * From LoginInfo LIMIT 1")
        except:
            self.connection.rollback()
            cursor.execute("""CREATE TABLE LoginInfo (
                    username varchar(20) NOT NULL PRIMARY KEY, 
                    password varchar(25) NOT NULL, 
                    userType varchar(20))""")
            self.connection.commit()

    def _initialize_customers(self) -> None:
        """
        Check if the database contains a table of customers. If not, initialize
        the table.
        """
        cursor = self.connection.cursor()
        # initialize the Customer table
        try:
            cursor.execute("SELECT * From Customers LIMIT 1")
        except:
            self.connection.rollback()
            cursor.execute("""CREATE TABLE Customers (
                    username varchar(20) REFERENCES LoginInfo(username) UNIQUE, 
                    name varchar(255),
                    bankInformation varchar(25) not null, 
                    address varchar(255), 
                    contact varchar(255))""")
            self.connection.commit()

    def _initialize_drivers(self):
        """
        Check if the database contains a table of drivers. If not, initialize
        the table.
        """
        cursor = self.connection.cursor()
        # initialize the Drivers table
        try:
            cursor.execute("SELECT * From Drivers LIMIT 1")
        except:
            self.connection.rollback()
            cursor.execute("""CREATE TABLE Drivers (
                    username varchar(20) REFERENCES LoginInfo(username) UNIQUE, 
                    name varchar(255), 
                    contact varchar(255))""")
            self.connection.commit()

    def _initialize_suppliers(self):
        """
        Check if the database contains a table of suppliers. If not, initialize
        the table.
        """
        cursor = self.connection.cursor()

        # initialize the Supplier table
        try:
            cursor.execute("SELECT * From Suppliers LIMIT 1")
        except:
            self.connection.rollback()
            cursor.execute("""CREATE TABLE Suppliers (
                    username varchar(20) REFERENCES LoginInfo(username) UNIQUE, 
                    name varchar(255) not null,
                    bankInformation varchar(255) not null,
                    contact varchar(255) not null)""")
            self.connection.commit()

    def _initialize_invoices(self):
        """
        Check if the database contains a table of invoices. If not, initialize
        the table.
        """
        cursor = self.connection.cursor()

        # initialize the Supplier table
        try:
            cursor.execute("SELECT * From Invoices LIMIT 1")
        except:
            self.connection.rollback()
            cursor.execute("""CREATE TABLE Invoices (
                    invoiceID INT GENERATED BY DEFAULT AS IDENTITY UNIQUE,
                    customerUsername varchar(255) references Customers(username),
                    supplierUsername varchar(255) references Suppliers(username),
                    driverUsername varchar(255) references Drivers(username), 
                    issuedDate timestamp not null default current_timestamp ,
                    completionDate timestamp,
                    onTheWay boolean default false, 
                    arrived boolean default false,
                    payment boolean default false
                    )""")
            self.connection.commit()

    def _initialize_orders(self):
        """
        Check if the database contains a table of orders. If not, initialize
        the table.
        """
        cursor = self.connection.cursor()
        try:
            cursor.execute("SELECT * FROM Orders LIMIT 1")
        except:
            self.connection.rollback()
            cursor.execute("""CREATE TABLE Orders (
                    item varchar(255),
                    price FLOAT,
                    amount INT,
                    invoiceID int references Invoices(invoiceID))
                    """)
            self.connection.commit()

    def initialize(self) -> None:
        """ Initialize this database."""
        self._initialize_login_info()
        self._initialize_customers()
        self._initialize_drivers()
        self._initialize_suppliers()
        self._initialize_invoices()
        self._initialize_orders()
